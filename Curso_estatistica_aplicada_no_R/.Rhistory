R.Version()
?
data()
s
R: 2 * 3
2*3
7 * 9 + 2 * 6
2.5 * 4
(50 + 7)/(8 * (3 - 5/2))
(50 + 7)/(8 * (3 - 5/2))
?
script
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
3 ^ 4
(50 + 7)/(8 * (3 - 5/2))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
(50 + 7)/(8 * (3 - 5/2))
#(50 + 7)/(8 * (3 - 5/2))
3 ^ 4
x
# meu primeiro comentário em R
x <- 15
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
raiz.quadrada <- sqrt(16)
source('~/.active-rstudio-document', echo=TRUE)
round(5.349999999, 2)
??inner_join
round(x, 3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("dplyr")
install.packages("readxl")
?dplyr
?dplyr
?dplyr
install.packages("tidyverse")
getwd()
source('~/.active-rstudio-document', echo=TRUE)
library(readr)
setwd(C:\Users\Renato\OneDrive\R\ciencias_de_dados_com_r_arquivos)
senado <- read_csv("senado.csv")
head(senado)
library(readr)
setwd(C:\users\Renato\OneDrive\R\ciencias_de_dados_com_r_arquivos)
setwd(C:/users/Renato/OneDrive/R/ciencias_de_dados_com_r_arquivos)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
class(senado)
library(readr)
setwd("E:/Data Analysis With R/WordCloud/WordCloud")
needed_libs <- c("tm", "wordcloud")
install_missing <- function(lib){
install.packages(lib,repos="https://cran.r-project.org/", dependencies = TRUE);
library(lib, character.only = TRUE)}
for (lib in needed_libs)
tryCatch(library(lib, character.only=TRUE), error = function(e) install_missing(lib))
set.seed(8)
# Reading the text in the PDF file
my_pdf <- readPDF(control=list(text="-layout"))(elem=list(uri="./papers/conceito.pdf"), language="pt")
save.image("C:\\Users\\Renato\\OneDrive\\CV\\cv_vaga_DAM_4\\r\\pdbh\\cwbh")
my_pdf <- readPDF(control=list(text="-layout"))(elem=list(uri="./papers/conceito.pdf"), language="pt")
my_pdf <- readPDF(control=list(text="-layout"))(elem=list(uri="./papers/conceitos.pdf"), language="pt")
q()
install.packages("e1071", dependencies = TRUE)
library(e1071)
delta <- 8
delta
class(delta)
logico <- TRUE
logico <- F
caractere <- "Texto"
caractere <- "Texto"
caractere <- 'Texto'
caractere <- 'Texto'
c = 2
d = 4
(c + d) * d
e = (c + d) * d
e
a = 1
b = 2
a < b
a == b
sqrt(2500)
sqrt(2500)
x <- c(1, 2, 3, 4, 5, 6)
x
x[1]
x[1]
x[1] <- 10
x[1] <- 10
x[1]
x[1]
x[1]
x
x
y = c("a", "b", "c", "d")
y
z = c(1L, 2L, 3L)
z = c(1L, 2L, 3L)
z
VADeaths
colnames(VADeaths)
colnames(VADeaths)
rownames(VADeaths)
rownames(VADeaths)
VADeaths[.1]
VADeaths[,1]
VADeaths[,1]
VADeaths[1,]
VADeaths[1:3,]
VADeaths[1:3,]
longley
longley
longley[,1:3]
longley$unemployed
$acessar coluna com $
longley$unemployed
longley$unemployed
longley["unemployed"]
longley['unemployed']
longley$Unemployed
longley['Unemployed']
ability.cov
ability.cov$cov
ability.cov[1]
ability.cov[1]
class(ability.cov$cov)
class(ability.cov$center)
ability.cov$cov[,1:3]
state.region
head(x=iris, n=2)
head(iris)
head(iris, 2)
head(n=22)
# Chamando a função utilizando 2 argumentos e dando nomes a eles
head(x=iris, n=2)
# Chamando a função com apenas um argumento
head(iris)
# Passando os dois argumentos sem nomes
head(iris, 2)
# Passando argumento sem o primeiro obrigatório (erro!)
head(n=22)
#Error in checkHT(n, dx <- dim(x)) :
help(sd)
help(sd)
esoph
esoph
head(esoph)
tail(esoph)
head(esoph, n=10)
dim(esoph)
length(islands)
colnames(esoph)
rownames(esoph)
summary(esoph)
x = file.choose()
x
x = file.choose()
x
install.packages("RODBC")
library(RODBC)
install.packages("xlsx")
library(xlsx)
library(RODBC)
a = 10
b = 20
if (a > 10)
if (a > 10)
{
print("A é maior")
}else
{
print("A não é maior")
}
x = ifelse(a > 10, "A é maior", "A não é maior")
x = ifelse(a > 10, "A é maior", "A não é maior")
x
x
for (i in 1:10){
print(i)
}
a = 1
while(a <= 10)
{
print(i)
a = a + 1
}
a = 10
b = 20
if (a > 10)
{
print("A é maior")
}else
{
print("A não é maior")
}
a = 1
while(a <= 10)
{
print(i)
a = a + 1
}
a = 1
while(a <= 10)
{
print(i)
a = a + 1
}
parouimpar <- function(x){
return(ifelse(x%%2=0, "Par", "Ímpar"))
}
parouimpar <- function(x)
{
return(ifelse(x%%2=0, "Par", "Ímpar"))
}
parouimpar <- function(x)
{
return(ifelse(x%%2=0, "Par", "Ímpar"))
}
parouimpar(5)
parouimpar(12)
parouimpar <- function(x){
return(ifelse(x%%2=0, "Par", "Ímpar"))
}
parouimpar <- function(x) {
return(ifelse(x%%2=0, "Par", "Ímpar"))
}
library(GA)
install.packages("GA")
library(GA)
f <-function(x){
#equação 2* x + 5 + 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return(resutlado - 20)
}
resultado = ga("real-value", fitness = f, min=c(-20), max=c(20), popSize = 10, maxiter = 20, monitor = T, names=c("a"))
resultado = ga("real-value", fitness = f, lower=c(-20), upper=c(20), popSize = 10, maxiter = 20, monitor = T, names=c("a"))
resultado = ga("real-value", fitness = f, lower=c(-20), upper=c(20), popSize = 10, maxiter = 20, monitor = T, names=c("a"))
f <-function(x){
#equação 2* x + 5 + 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return(resultado - 20)
f <-function(x){
#equação 2* x + 5 + 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return(resultado - 20)
}
f <-function(x){
#equação 2* x + 5 + 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return(resultado - 20)
}
resultado = ga("real-value", fitness = f, lower=c(-20), upper=c(20), popSize = 10, maxiter = 20, monitor = T, names=c("a"))
summary(resultado)$solution
plot(resultado)
plot(resultado)
mochila <- data.frame(item = c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30, 10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
{
pontos = 0
peso = 0
for (i in 1:7)
{
if (x[i] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
}
if (peso > 15)
pontos = 0
return(pontos)
}
mochila <- data.frame(item = c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30, 10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
if (x[ i ] != 0)
}
peso = peso + mochila[i,3]
peso = peso + mochila[i,3]
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
{
if (x[ i ] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
}
if (peso > 15)
mochila <- data.frame(item = c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30, 10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
f <-function(x)
{
pontos = 0
peso = 0
for (i in 1:7)
{
if (x[ i ] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
}
if (peso > 15)
pontos = 0
return(pontos)
}
resultado = ga("binary", fitness = f, nBits = 7, popSize = 10, maxiter = 15, names= c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"))
summary(resultado)
summary(resultado)$soluction
plot(resultado)
plot(resultado)
library(GA)
f <-function(x){
#equação 2* x + 5 + 20
resultado = 2 * x + 5
if (resultado > 20)
return (20 - resultado)
else
return(resultado - 20)
}
resultado = ga("real-value", fitness = f, lower=c(-20), upper=c(20), popSize = 10, maxiter = 20, monitor = T, names=c("a"))
summary(resultado)$solution
plot(resultado)
library(GA)
mochila <- data.frame(item = c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"), pontos = c(10, 20, 15, 2, 30, 10, 30), peso = c(1, 5, 10, 1, 7, 5, 1))
f <-function(x)
{
pontos = 0
peso = 0
for (i in 1:7)
{
if (x[ i ] != 0)
{
pontos = pontos + mochila[i,2]
peso = peso + mochila[i,3]
}
}
if (peso > 15)
pontos = 0
return(pontos)
}
resultado = ga("binary", fitness = f, nBits = 7, popSize = 10, maxiter = 15, names= c("canivete", "feijão", "batatas", "lanterna", "saco de dormir", "corda", "bussula"))
summary(resultado)
summary(resultado)$soluction
plot(resultado)
mapa = read.csv(file.choose(), header = F, sep = ";")
library(GA)
mapa = read.csv(file.choose(), header = F, sep = ";")
f <- function(z)
{
dist = 0
for (i in 1:4)
{
cidade1 = z[i]
cidade2 = z[i + 1]
dist = dist + mapa[cidade1, cidade2]
}
return(-dist)
}
resultado <- ga(type = "permutation", fitness = f, min = c(1, 1, 1, 1, 1), max = c(5, 5, 5, 5, 5), popSize = 10, maxiter = 5, names = c("Linden", "Parika", "Lethem", "Rosigno1", "New Amsterdam"))
summary(resultado)
summary(resultado)$solution
plot(resultado)
if (!require(dplyr))
install.packages("dplyr")
library(dplyr)
setwd("C:/Users/Renato/OneDrive/github/R/Curso_estatistica_aplicada_no_R/Banco de Dados 2 Codificado.csv")
setwd("C:/Users/Renato/OneDrive/github/R/Curso_estatistica_aplicada_no_R")
dados <- read.csv('Banco de Dados 2 Codificado.csv', sep = ';', dec = ',')
View(dados)
glimpse(dados)
dados$Genero <- factor(dados$Genero, label = c("M", "F"), levels = c(0, 1))
dados$Grau_de_Instruçao <- factor(dados$Grau_de_Instruçao,
label = c("Fundamental", "Medio", "Superior"),
levels = 0:2, order = T)
dados[dados==-999] <- NA
glimpse(dados)   # mostra váriaveis, tipos de variáveis, etc
