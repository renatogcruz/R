# exemplos
# Armazenamento numérico
salario <- 3450.89
horas <- '220'
sh <- salario/horas
shi <- as.integer(salario/horas)
shi = 5
shi = round(salario/horas)
salario <- 3450.89
horas <- 220
sh <- salario/horas
salario <- 3450.89
horas <- 220
sh <- salario/horas
shi <- as.integer(salario/horas)
shi = 5
shi = round(salario/horas)
shi <- as.integer(salario/horas) # converte para valor inteiro
shi = round(salario/horas)
shi <- as.integer(salario/horas) # converte para valor inteiro
shi = 5
shr = round(salario/horas)       # arredonda
numeros1 <- salario + horas
numeros1
numeros2 <- c(salario, horas)
numeros2
# OBJETIVO: entender como a linguagm R organiza os dados
# COMO?
# Exemplos
# Armazenamento carateres
nome_1 <- 'Renato Cruz'
nome_2 <- 'Maria Antonia'
idade <- '36'
idade + 5
nomes <- nome_1 + nome_2
nomes <- c(nome_1, nome_2)
nomes
nomes[1]
nomes[2]
# armazenamento de fatores
cargahoraria <- c(220,220,150,100,100)
salario <- 2600
hora <- 1000
l1 <- salario > hora
l1
logico <- TRUE
logico1 <- "TRUE"
logico2 <- c(1, TRUE, 3)
logico2
salario <- 8816.25
hora <- 20
l1 <- salario > hora
l1
logico <- TRUE
logico1 <- "TRUE"
logico2 <- c(1, TRUE, 3)
logico2
logico2 <- c(1, TRUE, FALSE, 3)
# Vetores de caracteres
is.vector(nomes)
mode(nomes)
nome = 'Renato'
horas = 10
l1 = TRUE
nome = 'Renato'
horas = 10
l1 = TRUE
is.vector(nomes)
mode(nomes)
nomes = 'Renato'
horas = 10
l1 = TRUE
nomes = 'Renato Cruz'
# Vetores de caracteres
is.vector(nomes)
mode(nomes)
# vetores numéricos
is.vector(horas)
mode(horas)
# vetor lógico
is.vector(l1)
mode(l1)
a <- c(1, 2, 3, 4, 5)
b <- c(1, "2", 3, 4, 5)
a
b
is.list(a)
is.list(b)
is.vector(a)
is.vector(b)
b <- list(10, '2', 8)
is.list(b)
mode(b)
str(b)
e <- list(c(10,6,51,5),'2',8)
str(e)
e[[1]][1]
str(b)
str(e)
e[[2]]
a <- c(1,2,3,4,5)
b <- c(1,'2',3,4,5)
a
b
m <- matrix(1:9, nrow = 3)
m
mode(m)
class(m)
is.matrix(m)
m
View(m)
m[1,3]
m[1,3] <- "a"
m
mode(m)
class(m)
state <- read.csv(file='C:/Users/Renato/Dropbox/pos_usp/usp_data_open/statistic/estatistica_pratica_para_ciencieas_de_dados/data/state.csv')
View(state)
mean(state[["Population"]])
media = mean(state[["Population"]])
media_pon = mean(state[["Population"]], trim=0.1)
mediana = median(state[["Population"]])
if(!require(matrixStats))install.packages("matrixStats")
library(matrixStats)
weighted.mean(state[["Murder.Rate"]], w=state[["Population"]])
mediana_pon = weighted.mean(state[["Murder.Rate"]], w=state[["Population"]])
View(state)
media_pon_2 = weighted.mean(state[["Murder.Rate"]], w=state[["Population"]])
mediana_pon = weightedMedian(state[["Murder.Rate"]], w=state[["Population"]])
state <- read.csv(file='C:/Users/Renato/Dropbox/pos_usp/usp_data_open/statistic/estatistica_pratica_para_ciencieas_de_dados/data/state.csv')
sd(state[['Population']])
desvio_padrao <- sd(state[['Population']])
mad <- mad(state[['Population']])
R.version
R.version.string
RStudio.Version()
ggplot(data = mpg)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) # Uma mensagem de erro
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
library(tidyverse)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = 'blue'))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 0)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 8)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
faceta_wrap(~class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, linetype = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
gem_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = disp, y = kwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = kwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
ola <- function(){
print('Olá, Esalq!')
}
ola()
ola <- function(){
print('Olá, Esalq!')
}
ola()
ola()
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) # Uma mensagem de erro
?mpg # pedindo ajuda/informação
ggplot(data = mpg) +
geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
# MAPEAMENTO ESTÉTICOS - página 7
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
# Top - alpha controla a transparência dos pontos
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# Botton
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
# para manipular manualmente, a variável deve estar fora de aes
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), shape = 8) # de 0 até 20
# FACETAS - página 14
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
# OBJETOS GEOMÉTRICOS - página 16
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) # geom de pontos
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy)) # geom de smooth
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, linetype = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "compact"),
se = FALSE
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut()))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
?geom_bar
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
demo <- reibble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40,
)
demo <- tribble(
~a, ~b,
"bar_1", 20,
"bar_2", 30,
"bar_3", 40,
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identify"
)
ggplot(data = demo) +
geom_bar(
mapping = aes(x = a, y = b), stat = "identity"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, y = ..prop.., group = 1)
)
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = medin
)
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun = medin
)
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = medin
)
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(
data = diamonds,
mapping = aes(x = cut, fill = clarity)
) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(
data = diamonds,
mapping = aes(x = cut, color = clarity)
) +
geom_bar(fill = NA, position = "identity")
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, color = clarity),
position = "fill"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, color = clarity),
position = "dodge"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, color = clarity),
position = "jitter"
)
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy),
position = "jitter"
)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
state <- read.csv(file='C:/Users/Renato/Dropbox/pos_usp/usp_data_open/statistic/estatistica_pratica_para_ciencieas_de_dados/data/state.csv')
breaks <- seq(from=min(state[["Population"]]),
to=max(state[["Population"]]), length=11)
pop_freq <- cut(state[["Population"]], breaks=breaks,
right = TRUE, include.lowest = TRUE)
table(pop_freq)
View(state)
pop_freq
tabela <- table(pop_freq)
tabela
# Desfazendo notação cientifica
options(scipen = 999)
tabela <- table(pop_freq)
tabela
breaks <- seq(from=min(state[["Population"]]),
to=max(state[["Population"]]), length=11)
pop_freq <- cut(state[["Population"]], breaks=breaks,
right = TRUE, include.lowest = TRUE)
tabela <- table(pop_freq)
tabela
par("mar")          # corrigindo erro
par(mar=c(1,1,1,1)) # corrigindo erro
boxplot(state[["Population"]]/1000000, ylab="Population (millions)")
breaks <- seq(from=min(state[["Population"]]),
to=max(state[["Population"]]), length=11)
pop_freq <- cut(state[["Population"]], breaks=breaks,
right = TRUE, include.lowest = TRUE)
tabela <- table(pop_freq)
tabela
# histograma de populações estaduais
hist(state[["Population"]], breaks = breaks)
hist(state[["Muder.Rate"]], freq = FALSE)
hist(state[["Muder.Rate"]], pop_freq = FALSE)
hist(state[["Murder.Rate"]], freq=FALSE)
lines(density(state[["Murder.Rate"]], lwd=3, col="blue"))
vec <- c(0, 0, 0, 0, 0, 0)
vec
# selecionando o primeiro valor de vec
vec[1]
# modificando primeiro valor de vec
vec[1] <- 1000
vec
# podemos modificar vários valores de uma vez
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
vec[4:6] <- vec[4:6] + 1
vec
# Podemos criar um valor novo
vec[7] <- 0
vec
deck2$new <- 1:52
setwd("C:/Users/Renato/OneDrive/github/R/hands-on_programming_with_r")
deck <- read.csv('deck.csv')
head(deck)
deck2$new <- 1:52
deck2 <- deck[1:52,] #copiando
head(deck2)
deck2$new <- 1:52
head(deck2)
deck2$new <- NULL    #removendo coluna (new)
head(deck2)
deck2[c(13, 26, 39, 52), ]
deck2[c(13, 26, 39, 52), 3]
deck2$value[c(13, 26, 39, 52)]
# Atribuindo novo conjunto de valores a esses valores antigos
deck2$value[c(13, 26, 39, 52)] <- c(14, 14, 14, 14)
head(deck2, 13)
shuffle <- function(cards){
random <- sample(1:52, size = 52)
cards[random, ]
}
deck3 <- shuffle(deck)
# onde estão os ases agora?
head(deck3)
